#!/usr/bin/env ruby

require "commander"
require "json"
require "github-labeler"

ARGV.push('-h') if ARGV.empty?

cli = HighLine.new($stdin, $stderr)

Commander.configure do
  program :name, 'GitHub Labeler'
  program :version, '0.2.0'
  program :description, 'Simple program for managing issue labels across GitHub repositories.'

  global_option '--verbose', "Enable output of detailed debugging information to STDERR"
  global_option '--execute', "Execute changes immediately, without asking for confirmation"
  global_option '--token STRING', String, "GitHub OAuth token for making API calls. If not specified, the GITHUB_OAUTH_TOKEN environment variable is used. Create a token here: https://github.com/settings/token"

  command :duplicate do |c|
    c.syntax = 'github-labeler duplicate [options]'
    c.description = 'Duplicate labels from one repository to another'

    c.option '-s', '--source STRING', String, '(required) Source repository to copy labels from (USER/REPO)'
    c.option '-d', '--destination STRING', String, '(required) Destination repository to copy labels to (USER/REPO), or name of JSON file with list of repositories'

    c.example "Destination is repository name", "github-labeler duplicate -s github/linguist -d foo/bar"
    c.example "Destinations are specified in JSON file", "github-labeler duplicate -s github/linguist -d dest.json"

    c.action do |args, options|
      options.default \
        :verbose => false,
        :execute => false,
        :token => ENV["GITHUB_OAUTH_TOKEN"]

      raise ArgumentError.new("Token is required") unless options.token
      raise ArgumentError.new("Source is required") unless options.source
      raise ArgumentError.new("Destination is required") unless options.destination

      labeler = GitHubLabeler.new(options.token, options.verbose)
      destination = File.file?(options.destination) ? JSON.parse(IO.read(options.destination), {:symbolize_names => true}) : [options.destination]
      changes = labeler.duplicate_labels_from_repo(options.source, destination)

      puts JSON.pretty_generate(changes)

      if changes.size == 0
        cli.say("No changes to execute.")
      elsif options.execute or cli.agree("Execute #{changes.size} changes? [y/n]")
        labeler.execute_changes(changes)
      end

      cli.say("Done!")
    end
  end

  command :export do |c|
    c.syntax = 'github-labeler export [options]'
    c.description = 'Export a list of labels from a repository or list of repositories'

    c.option '-r', '--repo STRING', String, '(required) Repository from which to extract labels (USER/REPO)'

    c.example "Repository is repository name", "github-labeler export -r foo/bar"

    c.action do |args, options|
      options.default \
        :verbose => false,
        :execute => false,
        :token   => ENV["GITHUB_OAUTH_TOKEN"]

      raise ArgumentError.new("Token is required") unless options.token
      raise ArgumentError.new("Repo is required") unless options.repo
      raise ArgumentError.new("Token is required") unless options.token

      labeler = GitHubLabeler.new(options.token, options.verbose)
      labels = labeler.export_labels_from_repo(options.repo)

      puts JSON.pretty_generate(labels)

      cli.say("Done!")
    end
  end

  command :execute do |c|
    c.syntax = 'github-labeler execute [options]'
    c.description = 'Execute changes previously created by the program'

    c.option '-c', '--changes STRING', String, '(required) Name of JSON file with list of changes'

    c.example "Changes are specified in JSON file", "github-labeler export -c changes.json"

    c.action do |args, options|
      options.default \
        :verbose => false,
        :execute => false,
        :token   => ENV["GITHUB_OAUTH_TOKEN"]

      raise ArgumentError.new("Token is required") unless options.token
      raise ArgumentError.new("Changes are required") unless options.changes

      labeler = GitHubLabeler.new(options.token, options.verbose)
      changes = JSON.parse(IO.read(options.changes), {:symbolize_names => true})
      result = labeler.execute_changes(changes)

      puts JSON.pretty_generate(result)

      cli.say("Done!")
    end
  end

  command :add do |c|
    c.syntax = 'github-labeler add [options]'
    c.description = 'Add one or more label to one or more repositories'

    c.option '-l', '--labels STRING', String, '(required) Label (NAME#COLOR) or name of JSON file with list of labels'
    c.option '-r', '--repos STRING', String, '(required) Destination repository to add labels to (USER/REPO) or name of JSON file with list of repositories'

    c.example "Label is a string and destination repo is repository name", "github-labeler add -r github/linguist -l api#c7def8"
    c.example "Labels and repositories are specified in JSON files", "github-labeler add -r repos.json -l labels.json"

    c.action do |args, options|
      options.default \
        :verbose => false,
        :execute => false,
        :token   => ENV["GITHUB_OAUTH_TOKEN"]

      raise ArgumentError.new("Token is required") unless options.token
      raise ArgumentError.new("Labels are required") unless options.labels
      raise ArgumentError.new("Repos are required") unless options.repos

      labeler = GitHubLabeler.new(options.token, options.verbose)
      repos = File.file?(options.repos) ? JSON.parse(IO.read(options.repos), {:symbolize_names => true}) : [options.repos]
      labels = options.labels

      if File.file?(options.labels)
        labels = JSON.parse(IO.read(options.labels), {:symbolize_names => true})
      else
        label_name, label_color = labels.split("#")
        labels = [{:name => label_name, :color => label_color}]
      end

      changes = labeler.add_labels_to_repos(repos, labels)

      puts JSON.pretty_generate(changes)

      if changes.size == 0
        cli.say("No changes to execute.")
      elsif options.execute or cli.agree("Execute #{changes.size} changes? [y/n]")
        labeler.execute_changes(changes)
      end

      cli.say("Done!")
    end
  end

  command :delete do |c|
    c.syntax = 'github-labeler delete [options]'
    c.description = 'Delete one or more label from one or more repositories'

    c.option '-l', '--labels STRING', String, '(required) Label (NAME) or name of JSON file with list of labels'
    c.option '-r', '--repos STRING', String, '(required) Destination repository to delete labels from (USER/REPO) or name of JSON file with list of repositories'

    c.example "Label is a string and destination repo is repository name", "github-labeler delete -r github/linguist -l api"
    c.example "Labels and repositories are specified in JSON files", "github-labeler delete -r repos.json -l labels.json"

    c.action do |args, options|
      options.default \
        :verbose => false,
        :execute => false,
        :token   => ENV["GITHUB_OAUTH_TOKEN"]

      raise ArgumentError.new("Token is required") unless options.token
      raise ArgumentError.new("Labels are required") unless options.labels
      raise ArgumentError.new("Repos are required") unless options.repos

      labeler = GitHubLabeler.new(options.token, options.verbose)
      repos = File.file?(options.repos) ? JSON.parse(IO.read(options.repos), {:symbolize_names => true}) : [options.repos]
      labels = options.labels

      if File.file?(options.labels)
        labels = JSON.parse(IO.read(options.labels), {:symbolize_names => true})
      else
        labels = [{:name => labels, :color => nil}]
      end

      changes = labeler.delete_labels_from_repos(repos, labels)

      puts JSON.pretty_generate(changes)

      if changes.size == 0
        cli.say("No changes to execute.")
      elsif options.execute or cli.agree("Execute #{changes.size} changes? [y/n]")
        labeler.execute_changes(changes)
      end

      cli.say("Done!")
    end
  end

  command :rename do |c|
    c.syntax = 'github-labeler rename [options]'
    c.description = 'Rename one or more labels in one or more repositories'

    c.option '-l', '--labels STRING', String, '(required) Label (OLDNAME/NEWNAME) or name of JSON file with list of labels'
    c.option '-r', '--repos STRING', String, '(required) Destination repository to rename labels in (USER/REPO) or name of JSON file with list of repositories'

    c.example "Label is a string and destination repo is repository name", "github-labeler rename -r github/linguist -l design/ui"
    c.example "Labels and repositories are specified in JSON files", "github-labeler rename -r repos.json -l labels.json"

    c.action do |args, options|
      options.default \
        :verbose => false,
        :execute => false,
        :token   => ENV["GITHUB_OAUTH_TOKEN"]

      raise ArgumentError.new("Token is required") unless options.token
      raise ArgumentError.new("Labels are required") unless options.labels
      raise ArgumentError.new("Repos are required") unless options.repos

      labeler = GitHubLabeler.new(options.token, options.verbose)
      repos = File.file?(options.repos) ? JSON.parse(IO.read(options.repos), {:symbolize_names => true}) : [options.repos]
      labels = options.labels

      if File.file?(options.labels)
        labels = JSON.parse(IO.read(options.labels), {:symbolize_names => true})
      else
        old_name, new_name = labels.split("/")
        labels = [{:name => old_name, :new_name => new_name}]
      end

      changes = labeler.rename_labels_in_repos(repos, labels)

      puts JSON.pretty_generate(changes)

      if changes.size == 0
        cli.say("No changes to execute.")
      elsif options.execute or cli.agree("Execute #{changes.size} changes? [y/n]")
        labeler.execute_changes(changes)
      end

      cli.say("Done!")
    end
  end

  command :recolor do |c|
    c.syntax = 'github-labeler recolor [options]'
    c.description = 'Recolor one or more labels in one or more repositories'

    c.option '-l', '--labels STRING', String, '(required) Label (NAME#COLOR) or name of JSON file with list of labels'
    c.option '-r', '--repos STRING', String, '(required) Destination repository to recolor labels in (USER/REPO) or name of JSON file with list of repositories'

    c.example "Label is a string and destination repo is repository name", "github-labeler recolor -r github/linguist -l api#c7def8"
    c.example "Labels and repositories are specified in JSON files", "github-labeler recolor -r repos.json -l labels.json"

    c.action do |args, options|
      options.default \
        :verbose => false,
        :execute => false,
        :token   => ENV["GITHUB_OAUTH_TOKEN"]

      raise ArgumentError.new("Token is required") unless options.token
      raise ArgumentError.new("Labels are required") unless options.labels
      raise ArgumentError.new("Repos are required") unless options.repos

      labeler = GitHubLabeler.new(options.token, options.verbose)
      repos = File.file?(options.repos) ? JSON.parse(IO.read(options.repos), {:symbolize_names => true}) : [options.repos]
      labels = options.labels

      if File.file?(options.labels)
        labels = JSON.parse(IO.read(options.labels), {:symbolize_names => true})
      else
        label_name, label_color = labels.split("#")
        labels = [{:name => label_name, :color => label_color}]
      end

      changes = labeler.recolor_labels_in_repos(repos, labels)

      puts JSON.pretty_generate(changes)

      if changes.size == 0
        cli.say("No changes to execute.")
      elsif options.execute or cli.agree("Execute #{changes.size} changes? [y/n]")
        labeler.execute_changes(changes)
      end

      cli.say("Done!")
    end
  end
end
